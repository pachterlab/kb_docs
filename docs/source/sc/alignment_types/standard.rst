Pseudoalignment of single-cell RNA-seq data
===========================================

The pseudoalignment process of single-cell RNA-seq data can be broken into two steps:  
**Reference generation** (handled by ``kb ref``) and **pseudoalignment** (handled by ``kb count``).

Reference Generation
--------------------

Required arguments for the ``kb ref`` command are:

- The path of the **index file** to be generated.
- The path of the **t2g file** to be generated.
- Either the **download flag** or the **genome and GTF files**.

### **Downloading a Prebuilt Reference**
A reference can be downloaded using the ``-d/--download`` flag, followed by the species of interest.  
Currently supported species: **"human", "mouse", "dog", "monkey", "zebrafish"**.  
The latest reference assemblies are always used (e.g., GRCh38 for human, MM11 for mouse).  

More details on the sources of supported species for download can be found here:  
`Kallisto transcriptome indices <https://github.com/pachterlab/kallisto-transcriptome-indices>`_

**Example:**
.. code-block:: bash

    kb ref -i index_file.idx -g t2g_file.txt -d human

### **Creating a Reference from a Custom Genome**
If making a custom reference, provide:  
1. A **genome FASTA file**  
2. A **GTF annotation file**  
3. The path of the **f1 FASTA file** to be generated  

**Example:**
.. code-block:: bash

    kb ref -i index_file.idx -g t2g_file.txt -f1 f1_file.fa genome.fa gtf_file.gtf

### **Using the D-List Feature**
By default, ``kb ref`` uses the provided genome as a **D-list**, which helps prevent false positive pseudoalignments. 
The d-list is a fasta file that consists of sequences for which one wants to avoid pseudoaligning to any k-mer in any of the sequences.
This d-list file helps in preventing false positive pseudoalignments of reads containing k-mers derived from intronic or intergenic regions.
To **disable** this, use ``--d-list=None``.

**Example:**
.. code-block:: bash

    kb ref -i index_file.idx -g t2g_file.txt -f1 f1_file.fa --d-list=None genome.fa gtf_file.gtf

### **Building a Reference for Spliced, Unspliced, and Ambiguous Transcripts**
By default, kb ref builds a reference for the "standard" workflow, 
which involves only the detection of **spliced** transcripts (i.e., not unspliced or ambgiuous).
To generate a reference that detects **spliced, unspliced, and ambiguous** transcripts,  
use ``--workflow=nac`` and provide additional file paths for ``f2``, ``c1``, and ``c2`` files.

**Example:**
.. code-block:: bash

    kb ref -i index_file.idx -g t2g_file.txt -f1 f1_file.fa --workflow=nac \
           -f2 f2_file.fa -c1 c1_file.txt -c2 c2_file.txt genome.fa gtf_file.gtf

### **Reference Files**
The **index file** and **t2g file** are always required for pseudoalignment:
- **Index file** (``.idx``) → Encodes the De Bruijn graph of the transcriptome.
- **t2g file** (``.txt``) → Maps transcripts to genes.

For details on additional generated files, refer to the documentation.

Pseudoalignment
---------------

Required arguments for the ``kb count`` command:

- The **index file** and **t2g file** (generated by ``kb ref``).
- The **sequencing technology** (check ``kb --list`` for supported technologies).
- The **output directory**.
- The **read FASTQ files**.

### **Basic Pseudoalignment**
**Example:**
.. code-block:: bash

    kb count -i index_file.idx -g t2g_file.txt -x 10xv3 -o output_dir read1.fastq read2.fastq ...

- Read files should be listed sequentially as positional arguments.
- FASTQ files can be **gzipped or unzipped**.
- For **single-cell data**, order files first by **lane**, then by **R1/R2**.
- For all technologies besides 10xv1 and multiplexed SMARTSEQ data, any index files (i.e., containing I1/I2 in the name) should not be passed into kb count.

**Example:**
.. code-block:: bash

    kb count -i index_file.idx -g t2g_file.txt -x 10xv3 -o output_dir \
        SAMPLE_L001_R1_001.fastq.gz SAMPLE_L001_R2_001.fastq.gz \
        SAMPLE_L002_R1_001.fastq.gz SAMPLE_L002_R2_001.fastq.gz ...

### **Paired-End Data**
For **paired-end** reads (e.g., much bulk RNA-seq, some SMARTSEQ), use ``--parity paired`` and  
list paired reads sequentially.

**Example:**
.. code-block:: bash

    kb count -i index_file.idx -g t2g_file.txt -x SMARTSEQ2 -o output_dir --parity paired \
        SAMPLE1_1.fastq.gz SAMPLE1_2.fastq.gz SAMPLE2_1.fastq.gz SAMPLE2_2.fastq.gz ...

### **Matching Workflows**
The ``--workflow`` flag of ``kb count`` **must match** the ``--workflow`` used in ``kb ref``.  
If using **nac**, pass the generated ``c1`` and ``c2`` files.

**Example:**
.. code-block:: bash

    kb count -i index_file.idx -g t2g_file.txt -x 10xv3 -o output_dir --workflow=nac \
        -c1 c1_file.txt -c2 c2_file.txt read1.fastq read2.fastq ...

### **Counting Multimapped Reads**
By default, multimapped reads **are not counted**.  
To include multimapped reads, use the ``--mm`` flag.

**Example:**
.. code-block:: bash

    kb count -i index_file.idx -g t2g_file.txt -x 10xv3 -o output_dir --mm read1.fastq read2.fastq ...

### **Output Files**
The output directory (``-o``) will contain:

- ``counts_unfiltered/`` (raw count matrix)
  - ``cells_x_genes.mtx`` → Matrix file
  - ``cells_x_genes.genes.txt`` → Gene names
  - ``cells_x_genes.barcodes.txt`` → Cell barcodes

If the ``--h5ad`` flag is used in kb count, an additional ``adata.h5ad`` file will be generated.

For more details on additional flags, output files, and other features, see the full documentation.
